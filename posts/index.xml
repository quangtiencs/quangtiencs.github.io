<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on quangtiencs</title>
    <link>https://quangtiencs.com/posts/</link>
    <description>Recent content in Posts on quangtiencs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>quangtiencs âž¤ bet on myself &amp; beat the odds</copyright>
    <lastBuildDate>Sun, 10 Jul 2022 00:00:00 +0530</lastBuildDate><atom:link href="https://quangtiencs.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Julia Language - Euler Project</title>
      <link>https://quangtiencs.com/posts/julia_euler_project/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0530</pubDate>
      
      <guid>https://quangtiencs.com/posts/julia_euler_project/</guid>
      <description>Github: https://github.com/quangtiencs/julia_project_euler Project Euler 6: Sum square difference HackerRank: https://www.hackerrank.com/contests/projecteuler/challenges/euler006 Euler: https://projecteuler.net/problem=6 function solution_euler_006(n::Int64)::Int64 return div((3 * n^4 + 2 * n^3 - 3 * n^2 - 2 * n), 12) end function main() t = parse(Int64, readline()) for i in 1:t n = parse(Int64, readline()) result = solution_euler_006(n) println(result) end end main() Project Euler 5: Smallest multiple HackerRank: https://www.hackerrank.com/contests/projecteuler/challenges/euler005 Euler: https://projecteuler.net/problem=5 function solution_euler_005(n::Int64)::Int64 smallest_multiple = 1 for i in 1:n current_gcd = gcd(smallest_multiple, i) unique_1 = div(smallest_multiple, current_gcd) unique_2 = div(i, current_gcd) smallest_multiple = unique_1 * current_gcd * unique_2 end return smallest_multiple end function main() t = parse(Int64, readline()) for i in 1:t n = parse(Int64, readline()) result = solution_euler_005(n) println(result) end end main() Project Euler 4: Largest palindrome product HackerRank: https://www.</description>
    </item>
    
    <item>
      <title>Bayesian Multi-Logit Regression implemented in Tensorflow Probability</title>
      <link>https://quangtiencs.com/posts/bayesian_logistics_tensorflow_probability/</link>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0530</pubDate>
      
      <guid>https://quangtiencs.com/posts/bayesian_logistics_tensorflow_probability/</guid>
      <description>Bayesian Multi-Logit Regression is a probabilistic model for multiclass classification. This tutorial will make a prototype model in Tensorflow Probability and fit it with No-U-Turn Sampler.
Let&amp;rsquo;s start!
1. Model specification: Multi-Logit regression for \(K\) classes has the following form:
$$p(y | x, \beta) = \text{Categorical}(y| \text{softmax}(x \beta))$$
With:
\(x \): input features (row) vector \(x = [x_1,&amp;hellip; x_D] \in R^D \) \(y \): the predicted outcome of the class label \(\beta \): weight matrix for \(K\) classes and \(D\) dimensions The bayesian version of this model with pior:</description>
    </item>
    
  </channel>
</rss>
