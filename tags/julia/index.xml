<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>julia on quangtiencs</title>
    <link>https://quangtiencs.com/tags/julia/</link>
    <description>Recent content in julia on quangtiencs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>quangtiencs ➤ bet on myself &amp; beat the odds</copyright>
    <lastBuildDate>Sun, 23 Jul 2023 08:00:00 +0700</lastBuildDate><atom:link href="https://quangtiencs.com/tags/julia/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[playground] Julia Turing.jl : Bayesian Cognitive Modeling - Comparing binomial rates</title>
      <link>https://quangtiencs.com/posts/turing_julia_bcm_chapter_009/</link>
      <pubDate>Sun, 23 Jul 2023 08:00:00 +0700</pubDate>
      
      <guid>https://quangtiencs.com/posts/turing_julia_bcm_chapter_009/</guid>
      <description>Github: https://github.com/quangtiencs/bayesian-cognitive-modeling-with-turing.jl
Bayesian Cognitive Modeling is one of the classical books for Bayesian Inference. The old version used WinBUGS/JAG software as the main implementation. You can find other implementations, such as Stan and PyMC, in the below link. I reimplemented these source codes with Julia Programming Language &amp;amp; Turing library in this tutorial.
WinBUGS/JAGS (official) &amp;amp; Stan: https://bayesmodels.com/ PyMC: https://github.com/pymc-devs/pymc-resources/tree/main/BCM using Pkg using Logging using DynamicPPL, Turing using Zygote, ReverseDiff using StatsPlots, Random using LaTeXStrings using CSV using DataFrames using SpecialFunctions using LinearAlgebra using FillArrays using CSV, DataFrames using LogExpFunctions using KernelDensity using Interpolations using Statistics using StatsBase using Dierckx format=:png :png Random.</description>
    </item>
    
    <item>
      <title>[playground] Julia Turing.jl : Bayesian Cognitive Modeling - Comparing Gaussian means</title>
      <link>https://quangtiencs.com/posts/turing_julia_bcm_chapter_008/</link>
      <pubDate>Tue, 30 May 2023 08:00:00 +0700</pubDate>
      
      <guid>https://quangtiencs.com/posts/turing_julia_bcm_chapter_008/</guid>
      <description>Github: https://github.com/quangtiencs/bayesian-cognitive-modeling-with-turing.jl
Bayesian Cognitive Modeling is one of the classical books for Bayesian Inference. The old version used WinBUGS/JAG software as the main implementation. You can find other implementations, such as Stan and PyMC, in the below link. I reimplemented these source codes with Julia Programming Language &amp;amp; Turing library in this tutorial.
WinBUGS/JAGS (official) &amp;amp; Stan: https://bayesmodels.com/ PyMC: https://github.com/pymc-devs/pymc-resources/tree/main/BCM using Pkg using Logging using DynamicPPL, Turing using Zygote, ReverseDiff using StatsPlots, Random using LaTeXStrings using CSV using DataFrames using SpecialFunctions using LinearAlgebra using FillArrays using CSV, DataFrames using LogExpFunctions using KernelDensity format=:png :png Random.</description>
    </item>
    
    <item>
      <title>[playground] Julia Turing.jl : Bayesian Cognitive Modeling - Latent-mixture models</title>
      <link>https://quangtiencs.com/posts/turing_julia_bcm_chapter_006/</link>
      <pubDate>Tue, 23 May 2023 08:00:00 +0700</pubDate>
      
      <guid>https://quangtiencs.com/posts/turing_julia_bcm_chapter_006/</guid>
      <description>Github: https://github.com/quangtiencs/bayesian-cognitive-modeling-with-turing.jl
Bayesian Cognitive Modeling is one of the classical books for Bayesian Inference. The old version used WinBUGS/JAG software as the main implementation. You can find other implementations, such as Stan and PyMC, in the below link. I reimplemented these source codes with Julia Programming Language &amp;amp; Turing library in this tutorial.
WinBUGS/JAGS (official) &amp;amp; Stan: https://bayesmodels.com/ PyMC: https://github.com/pymc-devs/pymc-resources/tree/main/BCM using Pkg using Logging using DynamicPPL, Turing using Zygote, ReverseDiff using StatsPlots, Random using LaTeXStrings using CSV using DataFrames using SpecialFunctions using LinearAlgebra using FillArrays using CSV, DataFrames using LogExpFunctions using KernelDensity format=:png :png Random.</description>
    </item>
    
    <item>
      <title>[playground] Julia Turing.jl : Bayesian Cognitive Modeling - Some examples of data analysis</title>
      <link>https://quangtiencs.com/posts/turing_julia_bcm_chapter_005/</link>
      <pubDate>Sun, 23 Apr 2023 08:00:00 +0700</pubDate>
      
      <guid>https://quangtiencs.com/posts/turing_julia_bcm_chapter_005/</guid>
      <description>Github: https://github.com/quangtiencs/bayesian-cognitive-modeling-with-turing.jl
Bayesian Cognitive Modeling is one of the classical books for Bayesian Inference. The old version used WinBUGS/JAG software as the main implementation. You can find other implementations, such as Stan and PyMC, in the below link. I reimplemented these source codes with Julia Programming Language &amp;amp; Turing library in this tutorial.
WinBUGS/JAGS (official) &amp;amp; Stan: https://bayesmodels.com/ PyMC: https://github.com/pymc-devs/pymc-resources/tree/main/BCM using Logging using DynamicPPL, Turing using Zygote, ReverseDiff using StatsPlots, Random using LaTeXStrings using CSV using DataFrames using SpecialFunctions using LinearAlgebra using FillArrays using CSV, DataFrames Random.</description>
    </item>
    
    <item>
      <title>[playground] Julia Turing.jl : Bayesian Cognitive Modeling - Inferences with gaussians</title>
      <link>https://quangtiencs.com/posts/turing_julia_bcm_chapter_004/</link>
      <pubDate>Wed, 22 Mar 2023 08:00:00 +0700</pubDate>
      
      <guid>https://quangtiencs.com/posts/turing_julia_bcm_chapter_004/</guid>
      <description>Github: https://github.com/quangtiencs/bayesian-cognitive-modeling-with-turing.jl
using DynamicPPL, Turing using StatsPlots, Random using LaTeXStrings using CSV using DataFrames using SpecialFunctions format=:png 4.1 Inferring a mean and standard deviation $$ \mu \sim \text{Gaussian}(0, \sqrt{1000}) $$ $$ \sigma \sim \text{Uniform} (0, 10) $$ $$ x_{i} \sim \text{Gaussian} (\mu, \sigma^2) $$
x = [1.1, 1.9, 2.3, 1.8] @model function GaussianModel(x) mu ~ Normal(0, sqrt(1000)) sigma ~ Uniform(0, 10.0) for i in eachindex(x) x[i] ~ Normal(mu, sigma) end end iterations=10_000 chain = sample(GaussianModel(x), NUTS(2000, 0.</description>
    </item>
    
    <item>
      <title>[playground] Julia Turing.jl : Bayesian Cognitive Modeling - Inferences with binomials</title>
      <link>https://quangtiencs.com/posts/turing_julia_bcm_chapter_003/</link>
      <pubDate>Sat, 18 Mar 2023 08:00:00 +0700</pubDate>
      
      <guid>https://quangtiencs.com/posts/turing_julia_bcm_chapter_003/</guid>
      <description>Github: https://github.com/quangtiencs/bayesian-cognitive-modeling-with-turing.jl
3.1 Inferring a rate $$ \theta \sim \text{Beta}(1, 1) $$ $$ k \sim \text{Binomial} ( \theta, n) $$
using DynamicPPL, Turing using StatsPlots, Random using LaTeXStrings using CSV using DataFrames using SpecialFunctions k = 5 n = 10 @model function BinomialModel(k) theta ~ Beta(1, 1) k ~ Binomial(n, theta) end iterations = 1_000 ϵ = 0.05 τ = 10 chain = sample(BinomialModel(k), HMC(ϵ, τ), iterations) p = histogram(chain[:theta], label=L&#34;</description>
    </item>
    
  </channel>
</rss>
